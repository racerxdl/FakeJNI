// From https://gist.github.com/santa4nt/4a8fd626335e36c94356
#include <memory>
#include <functional>
#include <iostream>

#include <jni.h>
#include "HelloJNI.h"   // auto-generated by `javah HelloJNI`


using std::string;
using std::function;
using std::unique_ptr;
using std::shared_ptr;
using std::cout;
using std::endl;


class jstring_deleter {
    JNIEnv *m_env;
    jstring m_jstr;

public:

    jstring_deleter(JNIEnv *env, jstring jstr) : m_env(env) , m_jstr(jstr) { }

    void operator()(const char *cstr) {
        cout << "[DEBUG] Releasing " << cstr << endl;
        m_env->ReleaseStringUTFChars(m_jstr, cstr);
    }
};

const string ToString(JNIEnv *env, jstring jstr) {
    jstring_deleter deleter(env, jstr);     // using a function object
    unique_ptr<const char, jstring_deleter> pcstr( env->GetStringUTFChars(jstr, JNI_FALSE), deleter );

    return string( pcstr.get() );
}

void DoSayHello(const string &name) {
    cout << "Hello, " << name << endl;
}

/*
 * Class:     HelloJNI
 * Method:    sayHello
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_HelloJNI_sayHello (JNIEnv *env, jobject thisObj, jstring arg) {
    DoSayHello(ToString(env, arg));
}

JNIEXPORT jint JNI_OnLoad(JavaVM *vm, void *reserved) {
    cout << "JNI OnLoad CALL" << endl;
    return JNI_VERSION_1_2;
}